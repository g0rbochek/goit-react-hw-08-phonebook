{"version":3,"file":"static/js/486.1bcfbbf1.chunk.js","mappings":"0PAQMA,GAASC,EAAAA,EAAAA,IAAO,CACpBC,MAAMC,EAAAA,EAAAA,MACHC,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,aACZC,OAAOJ,EAAAA,EAAAA,MAASG,SAAS,aACzBE,UAAUL,EAAAA,EAAAA,MAASC,IAAI,EAAG,cAAcE,SAAS,eAuFnD,UApFiB,WACf,IAAMG,GAAWC,EAAAA,EAAAA,MAMXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbX,KAAM,GACNK,MAAO,GACPC,SAAU,IAEZM,SAVmB,SAACC,EAAQC,GAC5BP,GAASQ,EAAAA,EAAAA,IAASF,GACpB,EASEG,iBAAkBlB,IAGpB,OACEmB,EAAAA,EAAAA,KAAA,QAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,EAAO,CAAAD,UACNE,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAAAH,SAAA,EACRD,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEC,UAAW,OAAQC,UAAW,SAAUC,MAAO,QAASP,SAAC,kBAGtEE,EAAAA,EAAAA,MAAA,QACEM,UAAU,OACVC,aAAa,MACbf,SAAUH,EAAOmB,aAAaV,SAAA,EAE9BE,EAAAA,EAAAA,MAAA,OAAKM,UAAU,YAAWR,SAAA,EACxBD,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRC,KAAK,OACLC,GAAG,OACH/B,KAAK,OACLgC,YAAY,iBACZC,MAAM,OACNC,QAAQ,WACRC,SAAU1B,EAAO2B,aACjBC,MAAO5B,EAAOI,OAAOb,OAEtBS,EAAO6B,QAAQtC,MAAQS,EAAO8B,OAAOvC,MACpCiB,EAAAA,EAAAA,KAAA,OAAKS,UAAU,YAAWR,SAAET,EAAO8B,OAAOvC,OACxC,SAENoB,EAAAA,EAAAA,MAAA,OAAKM,UAAU,YAAWR,SAAA,EACxBD,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRC,KAAK,QACLC,GAAG,QACH/B,KAAK,QACLgC,YAAY,mBACZC,MAAM,QACNC,QAAQ,WACRC,SAAU1B,EAAO2B,aACjBC,MAAO5B,EAAOI,OAAOR,QAEtBI,EAAO6B,QAAQjC,OAASI,EAAO8B,OAAOlC,OACrCY,EAAAA,EAAAA,KAAA,OAAKS,UAAU,YAAWR,SAAET,EAAO8B,OAAOlC,QACxC,SAENe,EAAAA,EAAAA,MAAA,OAAKM,UAAU,YAAWR,SAAA,EACxBD,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRC,KAAK,WACLC,GAAG,WACH/B,KAAK,WACLgC,YAAY,qBACZC,MAAM,WACNC,QAAQ,WACRC,SAAU1B,EAAO2B,aACjBC,MAAO5B,EAAOI,OAAOP,WAEtBG,EAAO6B,QAAQhC,UAAYG,EAAO8B,OAAOjC,UACxCW,EAAAA,EAAAA,KAAA,OAAKS,UAAU,YAAWR,SAAET,EAAO8B,OAAOjC,WACxC,SAENW,EAAAA,EAAAA,KAACuB,EAAAA,EAAM,CAACN,QAAQ,YAAYJ,KAAK,SAAQZ,SAAC,0BAQtD,C,sECjGaC,E,QAAUsB,GAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oD","sources":["Pages/Register/Register.jsx","components/Section/Section.styled.js"],"sourcesContent":["import { Button, Container, TextField } from '@mui/material';\nimport { Section } from 'components/Section/Section.styled';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { object, string } from 'yup';\n\nconst schema = object({\n  name: string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required!'),\n  email: string().required('Required!'),\n  password: string().min(2, 'Too Short!').required('Required!'),\n});\n\nconst Register = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    dispatch(register(values));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: handleSubmit,\n    validationSchema: schema,\n  });\n\n  return (\n    <main>\n      <Section>\n        <Container>\n          <h1 style={{ marginTop: '40px', textAlign: 'center', color: 'gray' }}>\n            Registration\n          </h1>\n          <form\n            className=\"form\"\n            autoComplete=\"off\"\n            onSubmit={formik.handleSubmit}\n          >\n            <div className=\"inputWrap\">\n              <TextField\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Enter name ...\"\n                label=\"Name\"\n                variant=\"outlined\"\n                onChange={formik.handleChange}\n                value={formik.values.name}\n              />\n              {formik.touched.name && formik.errors.name ? (\n                <div className=\"FormikErr\">{formik.errors.name}</div>\n              ) : null}\n            </div>\n            <div className=\"inputWrap\">\n              <TextField\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Enter e-mail ...\"\n                label=\"email\"\n                variant=\"outlined\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n              />\n              {formik.touched.email && formik.errors.email ? (\n                <div className=\"FormikErr\">{formik.errors.email}</div>\n              ) : null}\n            </div>\n            <div className=\"inputWrap\">\n              <TextField\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Enter password ...\"\n                label=\"password\"\n                variant=\"outlined\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n              />\n              {formik.touched.password && formik.errors.password ? (\n                <div className=\"FormikErr\">{formik.errors.password}</div>\n              ) : null}\n            </div>\n            <Button variant=\"contained\" type=\"submit\">\n              registration\n            </Button>\n          </form>\n        </Container>\n      </Section>\n    </main>\n  );\n};\n\nexport default Register;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 20px 0;\n  padding-left: 50px;\n`;\n"],"names":["schema","object","name","string","min","max","required","email","password","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","actions","register","validationSchema","_jsx","children","Section","_jsxs","Container","style","marginTop","textAlign","color","className","autoComplete","handleSubmit","TextField","type","id","placeholder","label","variant","onChange","handleChange","value","touched","errors","Button","styled","_templateObject","_taggedTemplateLiteral"],"sourceRoot":""}